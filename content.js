// Potwierdzenie za≈Çadowania content script
console.log('üöÄ Google Meet Recorder - Content script loaded at:', window.location.href);

// Sprawd≈∫ czy jeste≈õmy na w≈Ça≈õciwej stronie
if (!window.location.href.includes('meet.google.com')) {
    console.error('‚ùå Not on Google Meet page');
} else {
    console.log('‚úÖ On Google Meet page');
}

// Test Chrome API
if (typeof chrome === 'undefined' || !chrome.runtime) {
    console.error('‚ùå Chrome API not available');
} else {
    console.log('‚úÖ Chrome API available');
}

// Nas≈Çuchuj wiadomo≈õci z popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log('üì® Received message:', request);
    
    if (request.action === 'scrapeTranscript') {
        try {
            const transcriptData = scrapeTranscript();
            console.log('üìù Scraped data:', transcriptData);
            sendResponse({ success: true, data: transcriptData });
        } catch (error) {
            console.error('‚ùå Scraping error:', error);
            sendResponse({ success: false, error: error.message });
        }
    }
    return true; // Wskazuje, ≈ºe odpowied≈∫ bƒôdzie asynchroniczna
});

function scrapeTranscript() {
    const entries = [];
    
    // Szukamy r√≥≈ºnych mo≈ºliwych selektor√≥w dla transkrypcji - bardziej specyficzne
    const selectors = [
        // G≈Ç√≥wny kontener transkrypcji - bardziej specyficzne selektory
        '.a4cQT:not([role="menu"]):not([role="listbox"])', // Kontener transkrypcji, ale nie menu
        '.yEicIe.VbkSUe:not([role="menu"]):not([role="listbox"])', // Bloki transkrypcji - oryginalny selektor
        '.ygiCle.VbkSUe:not([role="menu"]):not([role="listbox"])', // Nowy selektor z obrazka
        '[jscontroller="MZnM8e"]:not([role="menu"]):not([role="listbox"])', // Alternatywny selektor
        '[jscontroller="bzaDVe"]:not([role="menu"]):not([role="listbox"])', // Kolejny mo≈ºliwy selektor
    ];
    
    let transcriptElements = null;
    let usedSelector = null;
    
    // Pr√≥buj znale≈∫ƒá elementy transkrypcji u≈ºywajƒÖc r√≥≈ºnych selektor√≥w
    for (const selector of selectors) {
        const elements = document.querySelectorAll(selector);
        if (elements.length > 0) {
            transcriptElements = elements;
            usedSelector = selector;
            console.log(`üîç Znaleziono transkrypcjƒô u≈ºywajƒÖc selektora: ${selector}`);
            console.log(`üìä Liczba znalezionych element√≥w: ${elements.length}`);
            
            // Debug: Sprawd≈∫ strukturƒô pierwszego elementu
            if (elements.length > 0) {
                console.log(`üîç DOM struktura pierwszego elementu:`);
                console.log(elements[0]);
                console.log(`üìÑ innerHTML pierwszego elementu:`);
                console.log(elements[0].innerHTML);
                console.log(`üìù textContent pierwszego elementu:`);
                console.log(elements[0].textContent);
            }
            break;
        }
    }
    
    if (!transcriptElements || transcriptElements.length === 0) {
        console.log(`\n‚ö†Ô∏è Nie znaleziono element√≥w przy u≈ºyciu podstawowych selektor√≥w`);
        
        // Pr√≥ba znalezienia po atrybutach jsname
        transcriptElements = document.querySelectorAll('[jsname="hJNqvr"]');
        console.log(`üîç Spr√≥ba z [jsname="hJNqvr"]: ${transcriptElements.length} element√≥w`);
        
        if (transcriptElements.length === 0) {
            console.log(`‚ùå Nie znaleziono ≈ºadnych element√≥w transkrypcji`);
            
            // Ostatnia pr√≥ba - znajd≈∫ wszystkie elementy zawierajƒÖce tekst
            console.log(`üîç Ostatnia pr√≥ba - szukam wszystkich element√≥w z tekstem...`);
            const allElements = document.querySelectorAll('*');
            const potentialTranscriptElements = [];
            
            for (const element of allElements) {
                const text = element.textContent?.trim();
                if (text && text.length > 20 && text.length < 1000 && 
                    !element.querySelector('*') && // Elementy li≈õciowe
                    isValidTranscriptText(text, '')) {
                    potentialTranscriptElements.push(element);
                }
            }
            
            console.log(`üîç Znaleziono ${potentialTranscriptElements.length} potencjalnych element√≥w`);
            
            if (potentialTranscriptElements.length === 0) {
                return {
                    entries: [],
                    scrapedAt: new Date().toISOString(),
                    meetingUrl: window.location.href
                };
            }
            
            transcriptElements = potentialTranscriptElements;
        }
    }
    
    // Przetwarzaj ka≈ºdy element transkrypcji
    console.log(`üîÑ Rozpoczynam przetwarzanie ${transcriptElements.length} element√≥w`);
    
    transcriptElements.forEach((element, index) => {
        console.log(`\nüîç Przetwarzam element ${index + 1}/${transcriptElements.length}:`);
        console.log(`üìÑ Element HTML:`, element.outerHTML.substring(0, 200) + '...');
        
        try {
            // Pr√≥buj znale≈∫ƒá najbli≈ºszy kontener zawierajƒÖcy ca≈ÇƒÖ wypowied≈∫
            let container = element.closest('.yEicIe.VbkSUe') || 
                           element.closest('.ygiCle.VbkSUe') ||
                           element.closest('[jscontroller]') || 
                           element.parentElement;
            
            console.log(`üì¶ Znaleziony kontener:`, container?.tagName, container?.className);
            
            if (!container) {
                console.log(`‚ùå Brak kontenera dla elementu ${index + 1}`);
                return;
            }
            
            // Sprawd≈∫ czy kontener nie jest menu lub lista wyboru
            const hasMenuRole = container.getAttribute('role') === 'menu' || 
                container.getAttribute('role') === 'listbox' ||
                container.querySelector('[role="menu"], [role="listbox"]') ||
                container.closest('[role="menu"], [role="listbox"]');
                
            if (hasMenuRole) {
                console.log(`‚ö†Ô∏è Pomijam element ${index + 1} - jest menu/listbox`);
                return;
            }
            
            // Pobierz nazwƒô osoby m√≥wiƒÖcej - ULEPSZONE z .NWpY1d
            let speaker = '';
            const speakerSelectors = ['[jsname="hJNqvr"]', '.MBpOc', '.NeplSy', '.NWpY1d'];
            
            console.log(`üë§ Szukam nazwy osoby m√≥wiƒÖcej...`);
            
            // Sprawd≈∫ wszystkie selektory dla speaker
            for (const selector of speakerSelectors) {
                const speakerElements = container.querySelectorAll(selector);
                console.log(`üîç Selektor '${selector}' znalaz≈Ç ${speakerElements.length} element√≥w`);
                
                speakerElements.forEach((el, idx) => {
                    const text = el.textContent.trim();
                    console.log(`  - Element ${idx + 1}: "${text}"`);
                    if (text && !speaker) {
                        speaker = text;
                        console.log(`‚úÖ Znaleziono osobƒô m√≥wiƒÖcƒÖ: "${speaker}"`);
                    }
                });
                
                if (speaker) break;
            }
            
            // Je≈õli nie znaleziono, szukaj w rodzicu i sƒÖsiadach
            if (!speaker) {
                console.log(`üîç Szukam w rodzicu...`);
                const parentSpeaker = container.parentElement?.querySelector('[jsname="hJNqvr"], .NWpY1d');
                if (parentSpeaker) {
                    speaker = parentSpeaker.textContent.trim();
                    console.log(`‚úÖ Znaleziono osobƒô m√≥wiƒÖcƒÖ w rodzicu: "${speaker}"`);
                }
            }
            
            // Je≈õli nadal nie znaleziono, szukaj w poprzednim elemencie (nazwa mo≈ºe byƒá oddzielnie)
            if (!speaker) {
                console.log(`üîç Szukam w poprzednim elemencie...`);
                const previousElement = container.previousElementSibling;
                if (previousElement) {
                    const prevSpeaker = previousElement.querySelector('[jsname="hJNqvr"], .NWpY1d, .MBpOc, .NeplSy');
                    if (prevSpeaker) {
                        speaker = prevSpeaker.textContent.trim();
                        console.log(`‚úÖ Znaleziono osobƒô m√≥wiƒÖcƒÖ w poprzednim elemencie: "${speaker}"`);
                    }
                }
            }
            
            if (!speaker) {
                console.log(`‚ùå Nie znaleziono nazwy osoby m√≥wiƒÖcej`);
            }
            
            // Pobierz tekst wypowiedzi
            let text = '';
            const textSelectors = [
                '[jsname="YSAhf"]',
                '[jsname="MBpOc"]', 
                '[jsname="NeplSy"]',
                '.VbkSUe',
                'span[jsname]'
            ];
            
            console.log(`üí¨ Szukam tekstu wypowiedzi...`);
            
            for (const selector of textSelectors) {
                const textElements = container.querySelectorAll(selector);
                console.log(`üîç Selektor '${selector}' znalaz≈Ç ${textElements.length} element√≥w`);
                
                textElements.forEach((el, idx) => {
                    const elementText = el.textContent.trim();
                    console.log(`  - Element ${idx + 1}: "${elementText}"`);
                    
                    // Sprawd≈∫ czy element nie jest nazwƒÖ osoby
                    if (elementText && elementText !== speaker) {
                        text += elementText + ' ';
                        console.log(`‚úÖ Dodano tekst: "${elementText}"`);
                    } else if (elementText === speaker) {
                        console.log(`‚ö†Ô∏è Pomijam - to nazwa osoby m√≥wiƒÖcej`);
                    }
                });
                
                if (text.trim()) {
                    console.log(`‚úÖ Znaleziono tekst z selektorem '${selector}': "${text.trim()}"`);
                    break;
                }
            }
            
            // Je≈õli nadal nie ma tekstu, pobierz ca≈Çy tekst kontenera
            if (!text.trim()) {
                console.log(`üîç Pr√≥bujƒô pobraƒá ca≈Çy tekst kontenera...`);
                text = container.textContent.trim();
                console.log(`üìÑ Pe≈Çny tekst kontenera: "${text}"`);
                
                // Usu≈Ñ nazwƒô osoby z tekstu
                if (speaker && text.startsWith(speaker)) {
                    text = text.substring(speaker.length).trim();
                    console.log(`‚úÖ Tekst po usuniƒôciu nazwy osoby: "${text}"`);
                }
            }
            
            if (!text.trim()) {
                console.log(`‚ùå Nie znaleziono tekstu wypowiedzi`);
            }
            
            // Pobierz timestamp je≈õli istnieje
            let timestamp = '';
            const timestampElement = container.querySelector('.frX31c-vlczkd, .P5KVFf, [jsname="r2fjRf"]');
            if (timestampElement) {
                timestamp = timestampElement.textContent.trim();
            }
            
            // Dodaj wpis tylko je≈õli ma tekst i jest prawid≈Çowy
            console.log(`\nüîç Walidacja wpisu:`);
            console.log(`üë§ Speaker: "${speaker || 'Nieznany'}"`);
            console.log(`üí¨ Text: "${text.trim()}"`);
            console.log(`‚è∞ Timestamp: "${timestamp}"`);
            
            if (text && text.trim()) {
                const isValid = isValidTranscriptText(text.trim(), speaker);
                console.log(`‚úÖ Walidacja isValidTranscriptText: ${isValid}`);
                
                if (isValid) {
                    const sanitizedText = sanitizeTranscriptText(text.trim());
                    console.log(`üßπ Tekst po czyszczeniu: "${sanitizedText}"`);
                    
                    const isValidAfterSanitization = isValidTranscriptText(sanitizedText, speaker);
                    console.log(`‚úÖ Walidacja po czyszczeniu: ${isValidAfterSanitization}`);
                    
                    if (sanitizedText && isValidAfterSanitization) {
                        const entry = {
                            speaker: speaker || 'Nieznany',
                            text: sanitizedText,
                            timestamp: timestamp
                        };
                        entries.push(entry);
                        console.log(`‚úÖ Dodano wpis:`, entry);
                    } else {
                        console.log(`‚ùå Odrzucono wpis - nieprawid≈Çowy po czyszczeniu`);
                    }
                } else {
                    console.log(`‚ùå Odrzucono wpis - nieprawid≈Çowy tekst`);
                }
            } else {
                console.log(`‚ùå Odrzucono wpis - brak tekstu`);
            }
        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd przetwarzania elementu:', error);
        }
    });
    
    // Je≈õli pierwsza metoda nie zadzia≈Ça≈Ça, spr√≥buj alternatywnƒÖ
    if (entries.length === 0) {
        console.log(`\n‚ö†Ô∏è Podstawowa metoda nie da≈Ça wynik√≥w, pr√≥bujƒô alternatywnƒÖ...`);
        const alternativeEntries = scrapeAlternativeMethod();
        entries.push(...alternativeEntries);
    }
    
    console.log(`\nüìä Podsumowanie skrobania:`);
    console.log(`üîç U≈ºyty selektor: ${usedSelector}`);
    console.log(`üìù Znalezionych wpis√≥w przed deduplikacjƒÖ: ${entries.length}`);
    
    // Usu≈Ñ duplikaty
    const uniqueEntries = removeDuplicates(entries);
    console.log(`üìù Unikalnych wpis√≥w: ${uniqueEntries.length}`);
    
    if (uniqueEntries.length > 0) {
        console.log(`‚úÖ Przyk≈Çadowy wpis:`, uniqueEntries[0]);
    } else {
        console.log(`‚ùå Brak wpis√≥w do zwr√≥cenia`);
    }
    
    const result = {
        entries: uniqueEntries,
        scrapedAt: new Date().toISOString(),
        meetingUrl: window.location.href
    };
    
    console.log(`üì§ Zwracam rezultat:`, result);
    return result;
}


function scrapeAlternativeMethod() {
    console.log(`\nüîÑ Pr√≥ba alternatywnej metody skrobania...`);
    const entries = [];
    
    // Uproszczona metoda - skup siƒô na .a4cQT kontenerach
    const transcriptContainers = document.querySelectorAll('.a4cQT:not([role="menu"]):not([role="listbox"])');
    console.log(`üîç Znaleziono ${transcriptContainers.length} kontener√≥w .a4cQT`);
    
    if (transcriptContainers.length === 0) {
        console.log(`‚ùå Brak kontener√≥w .a4cQT - kopu≈Çy inne selektory`);
        return entries;
    }
    
    // Spr√≥buj bardzo prostƒÖ metodƒô - znajd≈∫ wszystkie elementy zawierajƒÖce tekst
    transcriptContainers.forEach((container, index) => {
        console.log(`\nüîç Analizujƒô kontener ${index + 1}:`);
        console.log(`üìÑ Zawarto≈õƒá: "${container.textContent.trim()}"`);
        
        // Sprawd≈∫ czy kontener ma jakie≈õ dzieci
        const children = container.children;
        console.log(`üë∂ Liczba dzieci: ${children.length}`);
        
        // Spr√≥buj znale≈∫ƒá strukturƒô wpis√≥w
        for (let i = 0; i < children.length; i++) {
            const child = children[i];
            const childText = child.textContent.trim();
            
            console.log(`  - Dziecko ${i + 1}: "${childText}" (${child.tagName}.${child.className})`);
            
            if (childText && childText.length > 10 && isValidTranscriptText(childText, '')) {
                // Pr√≥ba wyodrƒôbnienia nazwy i tekstu
                const lines = childText.split('\n').filter(line => line.trim());
                console.log(`    Li≈Ñe tekstu:`, lines);
                
                if (lines.length >= 2) {
                    const potentialSpeaker = lines[0].trim();
                    const potentialText = lines.slice(1).join(' ').trim();
                    
                    console.log(`    Potencjalna osoba: "${potentialSpeaker}"`);
                    console.log(`    Potencjalny tekst: "${potentialText}"`);
                    
                    if (potentialText && isValidTranscriptText(potentialText, potentialSpeaker)) {
                        const sanitizedText = sanitizeTranscriptText(potentialText);
                        if (sanitizedText && isValidTranscriptText(sanitizedText, potentialSpeaker)) {
                            const entry = {
                                speaker: potentialSpeaker || 'Nieznany',
                                text: sanitizedText,
                                timestamp: ''
                            };
                            entries.push(entry);
                            console.log(`‚úÖ Dodano wpis z alternatywnej metody:`, entry);
                        }
                    }
                }
            }
        }
    });
    
    console.log(`üìä Alternatywna metoda znalaz≈Ça ${entries.length} wpis√≥w`);
    return entries;
}

function removeDuplicates(entries) {
    const seen = new Set();
    return entries.filter(entry => {
        const key = `${entry.speaker}:${entry.text}`;
        if (seen.has(key)) {
            return false;
        }
        seen.add(key);
        return true;
    });
}

function isLanguageSelectionText(text) {
    // Sprawd≈∫ czy tekst to CA≈ÅE menu jƒôzykowe (bardzo d≈Çugi tekst z wieloma jƒôzykami)
    const isFullLanguageMenu = text.includes('afrikaans (Republika Po≈Çudniowej Afryki)') && 
                              text.includes('alba≈Ñski (Albania)') && 
                              text.includes('polski (Polska)') && 
                              text.length > 500; // Menu jƒôzykowe jest bardzo d≈Çugie
    
    if (isFullLanguageMenu) {
        console.log('üîç Wykryto pe≈Çne menu jƒôzykowe (d≈Çugie)');
        return true;
    }
    
    // Wzorce dla KR√ìTKICH tekst√≥w, kt√≥re to definitywnie elementy UI
    const shortUIPatterns = [
        /^\s*format_size\s*$/i,
        /^\s*circle\s*$/i,
        /^\s*settings\s*$/i,
        /^\s*arrow_downward\s*$/i,
        /^\s*language\s*$/i,
        /^\s*Przejd≈∫ na koniec\s*$/i,
        /^\s*Domy≈õlna\s*$/i,
        /^\s*Bardzo ma≈Çe\s*$/i,
        /^\s*Ma≈Çe\s*$/i,
        /^\s*≈öredni\s*$/i,
        /^\s*Du≈ºe\s*$/i,
        /^\s*Wielkie\s*$/i,
        /^\s*Olbrzymie\s*$/i
    ];
    
    // Sprawd≈∫ tylko kr√≥tkie teksty UI
    const isShortUI = shortUIPatterns.some(pattern => pattern.test(text));
    if (isShortUI) {
        console.log('üîç Wykryto kr√≥tki tekst UI:', text);
        return true;
    }
    
    console.log('‚úÖ Tekst przeszed≈Ç walidacjƒô jako potencjalna transkrypcja');
    return false;
}

function isValidTranscriptText(text, speaker) {
    console.log(`üîç Walidacja tekstu: "${text}"`);
    
    // Sprawd≈∫ czy tekst nie jest z menu wyboru jƒôzyka
    if (isLanguageSelectionText(text)) {
        console.log(`‚ùå Odrzucono - tekst z menu wyboru jƒôzyka`);
        return false;
    }
    
    // Sprawd≈∫ czy tekst nie jest zbyt kr√≥tki (prawdopodobnie UI)
    if (text.length < 5) {
        console.log(`‚ùå Odrzucono - tekst zbyt kr√≥tki (${text.length} znak√≥w)`);
        return false;
    }
    
    // Sprawd≈∫ czy tekst nie sk≈Çada siƒô tylko z cyfr i znak√≥w specjalnych
    if (/^[\d\s\-\(\)\[\]]+$/.test(text)) {
        console.log(`‚ùå Odrzucono - tylko cyfry i znaki specjalne`);
        return false;
    }
    
    // Sprawd≈∫ czy tekst to pojedyncze s≈Çowa UI (ale nie odrzucaj je≈õli sƒÖ czƒô≈õciƒÖ d≈Çu≈ºszego tekstu)
    if (text.length < 20 && /^(settings|arrow_downward|circle|format_size)$/i.test(text)) {
        console.log(`‚ùå Odrzucono - ikona lub przycisk`);
        return false;
    }
    
    // Bardziej restrykcyjnie sprawd≈∫ czy to menu jƒôzykowe - tylko je≈õli zawiera wiele jƒôzyk√≥w
    if (text.includes('polski (Polska)') && text.includes('afrikaans (Republika') && text.length > 200) {
        console.log(`‚ùå Odrzucono - d≈Çuga lista jƒôzyk√≥w`);
        return false;
    }
    
    console.log(`‚úÖ Tekst jest prawid≈Çowy`);
    return true;
}

function sanitizeTranscriptText(text) {
    console.log(`üßπ Czyszczenie tekstu: "${text}"`);
    const originalText = text;
    
    // Usu≈Ñ znaki specjalne i ikony
    text = text.replace(/[\u{1F600}-\u{1F6FF}]/gu, ''); // Emotikony
    text = text.replace(/[\u{2600}-\u{26FF}]/gu, ''); // Symbole
    text = text.replace(/[\u{2700}-\u{27BF}]/gu, ''); // Znaki specjalne
    
    // Usu≈Ñ wielokrotne spacje
    text = text.replace(/\s+/g, ' ');
    
    // Usu≈Ñ fragmenty menu jƒôzykowego je≈õli siƒô przedosta≈Çy
    text = text.replace(/\b(afrikaans|alba≈Ñski|amharski|angielski|arabski|azerski|baskijski|bengalski|birma≈Ñski|chi≈Ñski|czeski|esto≈Ñski|filipi≈Ñski|fi≈Ñski|francuski|galicyjski|grecki|gruzi≈Ñski|gud≈∫arati|hebrajski|hindi|hiszpa≈Ñski|indonezyjski|islandzki|japo≈Ñski|jawajski|kannada|katalo≈Ñski|kazachski|khmerski|korea≈Ñski|laota≈Ñski|litewski|≈Çotewski|macedo≈Ñski|malajalam|malajski|marathi|mongolski|nepalski|niderlandzki|niemiecki|norweski|ormia≈Ñski|perski|polski|portugalski|rosyjski|rumu≈Ñski|serbski|s≈Çowacki|s≈Çowe≈Ñski|suahili|szwedzki|tajski|tamilski|telugu|turecki|ukrai≈Ñski|urdu|uzbecki|wƒôgierski|wietnamski|w≈Çoski|xhosa|zulu)\s*\([^)]+\)\s*BETA?\s*/gi, '');
    
    // Usu≈Ñ fragmenty UI
    text = text.replace(/\b(format_size|circle|settings|arrow_downward|Przejd≈∫ na koniec|Domy≈õlna|Bardzo ma≈Çe|Ma≈Çe|≈öredni|Du≈ºe|Wielkie|Olbrzymie|Bia≈Çy|Czarny|Niebieski|Zielony|Czerwony|≈ª√≥≈Çty|B≈Çƒôkitny|Fuksja)\b/gi, '');
    
    // Usu≈Ñ pozosta≈Çe artefakty
    text = text.replace(/\bBETA\b/gi, '');
    text = text.replace(/^\s*-\s*/, ''); // Usu≈Ñ my≈õlniki na poczƒÖtku
    text = text.replace(/\s*-\s*$/, ''); // Usu≈Ñ my≈õlniki na ko≈Ñcu
    
    const cleanedText = text.trim();
    
    if (originalText !== cleanedText) {
        console.log(`üßπ Tekst po czyszczeniu: "${cleanedText}"`);
    } else {
        console.log(`‚úÖ Tekst nie wymaga≈Ç czyszczenia`);
    }
    
    return cleanedText;
}

// Automatyczne wykrywanie poczƒÖtku spotkania
function detectMeetingStart() {
    // Sprawd≈∫ co 2 sekundy czy pojawi≈Çy siƒô napisy
    const checkInterval = setInterval(() => {
        const captionsButton = document.querySelector('[aria-label*="napisy"], [aria-label*="captions"], [aria-label*="subtitles"]');
        const transcriptElements = document.querySelectorAll('.a4cQT, [jscontroller="MZnM8e"]');
        
        if (captionsButton || transcriptElements.length > 0) {
            console.log('üé¨ Meeting started, captions available');
            clearInterval(checkInterval);
        }
    }, 2000);
    
    // Zatrzymaj sprawdzanie po 5 minutach
    setTimeout(() => clearInterval(checkInterval), 300000);
}

// Rozpocznij wykrywanie spotkania
detectMeetingStart();